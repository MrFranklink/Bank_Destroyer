<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - Banking System</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <style>
        /* Global Styles */
        :root {
            --primary-color: #0d6efd;
            --success-color: #198754;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #0dcaf0;
            --dark-color: #212529;
            --light-color: #f8f9fa;
            --border-radius: 10px;
            --box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background-color: #f5f6fa;
            color: var(--dark-color);
            line-height: 1.6;
        }

        /* Card Styles */
        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 1.5rem;
            transition: var(--transition);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .card-header {
            background-color: white;
            border-bottom: 2px solid var(--light-color);
            font-weight: 600;
            padding: 1rem 1.5rem;
        }

        /* Button Styles */
        .btn {
            border-radius: 8px;
            padding: 0.5rem 1.5rem;
            font-weight: 500;
            transition: var(--transition);
            border: none;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        /* Form Styles */
        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid #dee2e6;
            padding: 0.65rem 1rem;
            transition: var(--transition);
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);
        }

        /* Alert Styles */
        .alert {
            border-radius: var(--border-radius);
            border: none;
            box-shadow: var(--box-shadow);
        }

        /* Toast Container */
        .toast-container {
            position: fixed;
            top: 80px;
            right: 20px;
            z-index: 9999;
        }

        /* Custom Toast Styles */
        .toast {
            min-width: 300px;
            border-radius: 10px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.2);
        }

        .toast-header {
            border-radius: 10px 10px 0 0;
            font-weight: 600;
        }

        .toast-success {
            border-left: 5px solid #198754;
        }

        .toast-error {
            border-left: 5px solid #dc3545;
        }

        .toast-warning {
            border-left: 5px solid #ffc107;
        }

        .toast-info {
            border-left: 5px solid #0dcaf0;
        }

        /* Animation */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeIn 0.5s ease;
        }

        /* Utility Classes */
        .shadow-sm-custom {
            box-shadow: 0 1px 4px rgba(0,0,0,0.08);
        }

        .rounded-lg {
            border-radius: var(--border-radius);
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .card {
                margin-bottom: 1rem;
            }
        }
    </style>
    
    @RenderSection("styles", required: false)
</head>
<body>
    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>

    <div id="content">
        @RenderBody()
    </div>

    <!-- Bootstrap 5 JS Bundle (includes Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery (for compatibility) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Toast Notification System -->
    <script>
        // Toast Notification Function
        function showToast(title, message, type = 'info', duration = 5000) {
            const toastContainer = document.getElementById('toastContainer');
            
            // Create toast element
            const toastId = 'toast-' + Date.now();
            const iconMap = {
                'success': 'bi-check-circle-fill',
                'error': 'bi-exclamation-triangle-fill',
                'warning': 'bi-exclamation-circle-fill',
                'info': 'bi-info-circle-fill'
            };
            
            const colorMap = {
                'success': 'text-success',
                'error': 'text-danger',
                'warning': 'text-warning',
                'info': 'text-info'
            };
            
            const toastHTML = `
                <div id="${toastId}" class="toast toast-${type}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <i class="bi ${iconMap[type]} ${colorMap[type]} me-2"></i>
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;
            
            toastContainer.insertAdjacentHTML('beforeend', toastHTML);
            
            // Initialize and show toast
            const toastElement = document.getElementById(toastId);
            const bsToast = new bootstrap.Toast(toastElement, {
                autohide: true,
                delay: duration
            });
            
            bsToast.show();
            
            // Remove toast after it's hidden
            toastElement.addEventListener('hidden.bs.toast', function () {
                toastElement.remove();
            });
        }

        // Form Data Persistence
        function saveFormData(formId) {
            const form = document.getElementById(formId);
            if (!form) return;
            
            const formData = {};
            const inputs = form.querySelectorAll('input, select, textarea');
            
            inputs.forEach(input => {
                if (input.name && input.type !== 'password') {
                    formData[input.name] = input.value;
                }
            });
            
            sessionStorage.setItem('formData_' + formId, JSON.stringify(formData));
        }

        function restoreFormData(formId) {
            const savedData = sessionStorage.getItem('formData_' + formId);
            if (!savedData) return;
            
            const formData = JSON.parse(savedData);
            const form = document.getElementById(formId);
            if (!form) return;
            
            Object.keys(formData).forEach(name => {
                const input = form.querySelector(`[name="${name}"]`);
                if (input && input.type !== 'password') {
                    input.value = formData[name];
                }
            });
        }

        function clearFormData(formId) {
            sessionStorage.removeItem('formData_' + formId);
        }

        // Auto-uppercase input helper
        function setupAutoUppercase(selector) {
            document.querySelectorAll(selector).forEach(input => {
                input.addEventListener('input', function(e) {
                    this.value = this.value.toUpperCase();
                });
            });
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Setup auto-uppercase for PAN and Customer ID fields
            setupAutoUppercase('input[name="pan"]');
            setupAutoUppercase('input[name="customerId"]');
            
            // Check for server-side messages and show as toasts
            const successMessage = '@(TempData["SuccessMessage"] ?? "")';
            const errorMessage = '@(TempData["ErrorMessage"] ?? "")';
            const warningMessage = '@(TempData["WarningMessage"] ?? "")';
            
            if (successMessage) {
                showToast('Success!', successMessage, 'success');
                
                // Clear all form data from sessionStorage on success
                clearAllFormsOnSuccess();
            }
            
            if (errorMessage) {
                showToast('Error!', errorMessage, 'error', 7000); // Longer duration for errors
            }
            
            if (warningMessage) {
                showToast('Warning!', warningMessage, 'warning', 6000);
            }
        });

        // Clear all form data and reset forms on success
        function clearAllFormsOnSuccess() {
            // Clear all sessionStorage form data
            Object.keys(sessionStorage).forEach(key => {
                if (key.startsWith('formData_')) {
                    sessionStorage.removeItem(key);
                }
            });
            
            // Reset all forms on the page
            document.querySelectorAll('form').forEach(form => {
                form.reset();
            });
        }
    </script>
    
    @RenderSection("scripts", required: false)
</body>
</html>