@using BankApp.Services
@{
    ViewBag.Title = "Employee Dashboard";
    Layout = "~/Views/Shared/Template.cshtml";
}

@section styles {
    <style>
        /* Top Navbar */
        .navbar-custom {
            background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
            padding: 1rem 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .navbar-brand {
            color: white !important;
            font-weight: 600;
            font-size: 1.5rem;
        }

        .navbar-custom .nav-link {
            color: rgba(255,255,255,0.9) !important;
            margin: 0 0.5rem;
            transition: all 0.3s ease;
        }

        .navbar-custom .nav-link:hover {
            color: white !important;
            transform: translateY(-2px);
        }

        .user-dropdown {
            background-color: rgba(255,255,255,0.2);
            border-radius: 25px;
            padding: 0.5rem 1rem;
            color: white;
            border: none;
        }

        .user-dropdown:hover {
            background-color: rgba(255,255,255,0.3);
        }

        /* Hero Section */
        .hero-section {
            background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
            color: white;
            padding: 3rem 0 2rem;
            margin-bottom: 2rem;
        }

        .hero-section h1 {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 20px rgba(0,0,0,0.15);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.8rem;
            margin-right: 1rem;
        }

        .stat-card.customers .stat-icon {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .stat-card.accounts .stat-icon {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }

        .stat-card.transactions .stat-icon {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            color: white;
        }

        .stat-content h3 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0 0 0.25rem 0;
            color: #2c3e50;
        }

        .stat-content p {
            margin: 0;
            color: #7f8c8d;
            font-size: 0.9rem;
        }

        /* Tab Navigation */
        .nav-pills {
            margin-bottom: 2rem;
            background: white;
            padding: 1rem;
            border-radius: 15px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .nav-pills .nav-link {
            border-radius: 10px;
            color: #6c757d;
            font-weight: 500;
            margin-right: 0.5rem;
            padding: 0.75rem 1.5rem;
        }

        .nav-pills .nav-link.active {
            background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
            color: white;
        }

        /* Content Card */
        .content-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .content-card h4 {
            margin: 0 0 1.5rem 0;
            color: #2c3e50;
            font-weight: 600;
        }

        /* Tables */
        .modern-table {
            width: 100%;
            border-collapse: collapse;
        }

        .modern-table thead {
            background: linear-gradient(135deg, #17a2b8 0%, #117a8b 100%);
            color: white;
        }

        .modern-table th {
            padding: 1rem;
            text-align: left;
            font-weight: 600;
            border: none;
        }

        .modern-table tbody tr {
            border-bottom: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .modern-table tbody tr:hover {
            background-color: #f8f9fa;
        }

        .modern-table td {
            padding: 1rem;
            border: none;
        }

        /* Badges */
        .badge-custom {
            padding: 0.35rem 0.65rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .badge-success {
            background-color: #d4edda;
            color: #155724;
        }

        .badge-info {
            background-color: #d1ecf1;
            color: #0c5460;
        }

        .badge-warning {
            background-color: #fff3cd;
            color: #856404;
        }

        .badge-secondary {
            background-color: #e9ecef;
            color: #495057;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .hero-section h1 {
                font-size: 1.5rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<!-- Top Navbar -->
<nav class="navbar navbar-expand-lg navbar-custom fixed-top">
    <div class="container">
        <a class="navbar-brand" href="#">
            <i class="bi bi-bank2 me-2"></i>Banking System
        </a>
        
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto align-items-center">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle user-dropdown" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="bi bi-person-circle me-2"></i>@ViewBag.UserName
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="@Url.Action("ChangePassword", "Dashboard")"><i class="bi bi-key me-2"></i>Change Password</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="@Url.Action("Logout", "Auth")"><i class="bi bi-box-arrow-right me-2"></i>Logout</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Hero Section -->
<div class="hero-section" style="margin-top: 56px;">
    <div class="container">
        <h1>Welcome back, Employee @ViewBag.UserName! 👋</h1>
        <p>Employee Dashboard - @ViewBag.DeptId</p>
    </div>
</div>

<!-- Main Content -->
<div class="container pb-5">
    <!-- Alerts removed - now using Toast notifications from Template.cshtml -->

    <!-- Statistics -->
    <div class="stats-grid">
        <div class="stat-card customers">
            <div class="stat-icon">
                <i class="bi bi-people-fill"></i>
            </div>
            <div class="stat-content">
                <h3>@(ViewBag.CustomerCount ?? 0)</h3>
                <p>Total Customers</p>
            </div>
        </div>

        <div class="stat-card accounts">
            <div class="stat-icon">
                <i class="bi bi-credit-card-fill"></i>
            </div>
            <div class="stat-content">
                <h3>@(ViewBag.AccountCount ?? 0)</h3>
                <p>Active Accounts</p>
            </div>
        </div>

        <div class="stat-card transactions">
            <div class="stat-icon">
                <i class="bi bi-graph-up-arrow"></i>
            </div>
            <div class="stat-content">
                <h3>@(ViewBag.TransactionCount ?? 0)</h3>
                <p>Transactions Today</p>
            </div>
        </div>
    </div>

    <!-- Tab Navigation -->
    <ul class="nav nav-pills" id="employeeTabs" role="tablist">
        <li class="nav-item">
            <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#open-accounts" type="button">
                <i class="bi bi-credit-card me-1"></i>Open Accounts
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link" data-bs-toggle="pill" data-bs-target="#transactions" type="button">
                <i class="bi bi-arrow-left-right me-1"></i>Transactions
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link" data-bs-toggle="pill" data-bs-target="#view-accounts" type="button">
                <i class="bi bi-list-ul me-1"></i>View Accounts
            </button>
        </li>
        <li class="nav-item">
            <button class="nav-link" data-bs-toggle="pill" data-bs-target="#view-customers" type="button">
                <i class="bi bi-people me-1"></i>View Customers
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content">
        <!-- Open Accounts Tab -->
        <div class="tab-pane fade show active" id="open-accounts">
            <div class="content-card">
                <h4><i class="bi bi-credit-card me-2"></i>Open New Account</h4>
                
                <ul class="nav nav-pills mb-3">
                    <li class="nav-item">
                        <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#savings">Savings</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#fd">Fixed Deposit</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#loan">Loan</button>
                    </li>
                </ul>

                <div class="tab-content">
                    <!-- Savings -->
                    <div class="tab-pane fade show active" id="savings">
                        <form method="post" action="@Url.Action("OpenSavingsAccount", "Dashboard")">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="customerId" type="text" class="form-control" placeholder="Customer ID" pattern="MLA[0-9]{5}" maxlength="8" style="text-transform: uppercase;" required>
                                        <label>Customer ID (MLA00001)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="initialDeposit" type="number" class="form-control" placeholder="Amount" step="0.01" min="1000" required>
                                        <label>Initial Deposit (Min ₹1,000)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary btn-lg">
                                    <i class="bi bi-check-circle me-2"></i>Open Savings Account
                                </button>
                            </div>
                        </form>
                    </div>

                    <!-- Fixed Deposit -->
                    <div class="tab-pane fade" id="fd">
                        <form method="post" action="@Url.Action("OpenFixedDepositAccount", "Dashboard")">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="customerId" type="text" class="form-control" placeholder="Customer ID" pattern="MLA[0-9]{5}" maxlength="8" style="text-transform: uppercase;" required>
                                        <label>Customer ID (MLA00001)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="amount" type="number" class="form-control" placeholder="Amount" step="0.01" min="10000" required>
                                        <label>Amount (Min ₹10,000)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="startDate" type="date" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                                        <label>Start Date</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="tenureMonths" type="number" class="form-control" placeholder="Months" min="1" max="360" required>
                                        <label>Tenure (Months)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary btn-lg">
                                    <i class="bi bi-check-circle me-2"></i>Open Fixed Deposit
                                </button>
                            </div>
                        </form>
                    </div>

                    <!-- Loan -->
                    <div class="tab-pane fade" id="loan">
                        <div class="alert alert-info mb-3">
                            <i class="bi bi-info-circle me-2"></i>
                            <strong>Loan Eligibility:</strong> Based on monthly salary, you can borrow 30-60 times your salary. EMI should not exceed 60% of salary.
                        </div>

                        <!-- Loan Eligibility Calculator -->
                        <div id="loanEligibilityCard" class="alert alert-success" style="display:none;">
                            <h6 class="mb-2"><i class="bi bi-calculator me-2"></i>Loan Eligibility</h6>
                            <p class="mb-1"><strong>Eligible Loan Range:</strong> <span id="loanRange">-</span></p>
                            <p class="mb-1"><strong>Interest Rate:</strong> <span id="interestRate">-</span></p>
                            <p class="mb-0"><strong>Max EMI (60% of salary):</strong> <span id="maxEmi">-</span></p>
                        </div>

                        <div id="loanValidationMessage" class="alert" style="display:none;"></div>

                        <form method="post" action="@Url.Action("OpenLoanAccount", "Dashboard")" id="loanForm">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="customerId" type="text" class="form-control" placeholder="Customer ID" pattern="MLA[0-9]{5}" maxlength="8" style="text-transform: uppercase;" required>
                                        <label>Customer ID (MLA00001)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="monthlySalary" id="monthlySalary" type="number" class="form-control" placeholder="Salary" step="0.01" min="1000" required>
                                        <label>Monthly Salary (Min ₹1,000)</label>
                                    </div>
                                    <small class="text-muted">Enter salary first to see loan eligibility</small>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="loanAmount" id="loanAmount" type="number" class="form-control" placeholder="Amount" step="0.01" min="10000" required>
                                        <label>Loan Amount (Min ₹10,000)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="tenureMonths" id="tenureMonths" type="number" class="form-control" placeholder="Months" min="1" max="360" required>
                                        <label>Tenure (Months)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="startDate" type="date" class="form-control" min="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                                        <label>Start Date</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input type="text" id="estimatedEmi" class="form-control" placeholder="Estimated EMI" readonly>
                                        <label>Estimated EMI (₹)</label>
                                    </div>
                                    <small class="text-muted">Auto-calculated based on amount & tenure</small>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" id="loanSubmitBtn" class="btn btn-primary btn-lg" disabled>
                                    <i class="bi bi-check-circle me-2"></i>Sanction Loan
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Transactions Tab -->
        <div class="tab-pane fade" id="transactions">
            <div class="content-card">
                <h4><i class="bi bi-arrow-left-right me-2"></i>Process Transactions</h4>
                
                <ul class="nav nav-pills mb-3">
                    <li class="nav-item">
                        <button class="nav-link active" data-bs-toggle="pill" data-bs-target="#deposit">Deposit</button>
                    </li>
                    <li class="nav-item">
                        <button class="nav-link" data-bs-toggle="pill" data-bs-target="#withdraw">Withdraw</button>
                    </li>
                </ul>

                <div class="tab-content">
                    <!-- Deposit -->
                    <div class="tab-pane fade show active" id="deposit">
                        <form method="post" action="@Url.Action("Deposit", "Dashboard")">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="accountId" type="text" class="form-control" placeholder="Account ID" required>
                                        <label>Savings Account ID (SB00001)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="amount" type="number" class="form-control" placeholder="Amount" step="0.01" min="100" required>
                                        <label>Deposit Amount (Min ₹100)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-success btn-lg">
                                    <i class="bi bi-check-circle me-2"></i>Process Deposit
                                </button>
                            </div>
                        </form>
                    </div>

                    <!-- Withdraw -->
                    <div class="tab-pane fade" id="withdraw">
                        <form method="post" action="@Url.Action("Withdraw", "Dashboard")">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="accountId" type="text" class="form-control" placeholder="Account ID" required>
                                        <label>Savings Account ID (SB00001)</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input name="amount" type="number" class="form-control" placeholder="Amount" step="0.01" min="100" required>
                                        <label>Withdrawal Amount (Min ₹100)</label>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-danger btn-lg">
                                    <i class="bi bi-check-circle me-2"></i>Process Withdrawal
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- View Accounts Tab -->
        <div class="tab-pane fade" id="view-accounts">
            <div class="content-card">
                <h4><i class="bi bi-list-ul me-2"></i>All Accounts</h4>
                
                @if (ViewBag.Accounts != null && ((List<AccountDTO>)ViewBag.Accounts).Count > 0)
                {
                    <table class="modern-table">
                        <thead>
                            <tr>
                                <th>Account ID</th>
                                <th>Type</th>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var account in (List<AccountDTO>)ViewBag.Accounts)
                            {
                                <tr>
                                    <td><strong>@account.AccountID</strong></td>
                                    <td>
                                        @if (account.AccountType == "SAVING")
                                        {
                                            <span class="badge-custom badge-success">Savings</span>
                                        }
                                        else if (account.AccountType == "FIXED-DEPOSIT")
                                        {
                                            <span class="badge-custom badge-info">FD</span>
                                        }
                                        else
                                        {
                                            <span class="badge-custom badge-warning">Loan</span>
                                        }
                                    </td>
                                    <td>@account.CustomerID</td>
                                    <td>@account.OpenDate.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        @if (account.Status == "OPEN")
                                        {
                                            <span class="badge-custom badge-success">@account.Status</span>
                                        }
                                        else
                                        {
                                            <span class="badge-custom badge-secondary">@account.Status</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-muted">No accounts found</p>
                }
            </div>
        </div>

        <!-- View Customers Tab -->
        <div class="tab-pane fade" id="view-customers">
            <div class="content-card">
                <h4><i class="bi bi-people me-2"></i>All Customers</h4>
                
                @if (ViewBag.Customers != null && ((List<CustomerDTO>)ViewBag.Customers).Count > 0)
                {
                    <table class="modern-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>PAN</th>
                                <th>Phone</th>
                                <th>DOB</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var customer in (List<CustomerDTO>)ViewBag.Customers)
                            {
                                <tr>
                                    <td><strong>@customer.Custid</strong></td>
                                    <td>@customer.Custname</td>
                                    <td>@customer.Pan</td>
                                    <td>@customer.PhoneNumber</td>
                                    <td>@(customer.DOB?.ToString("dd/MM/yyyy") ?? "N/A")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p class="text-muted">No customers found</p>
                }
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        // Auto-dismiss alerts
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert-dismissible');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);

        // Form IDs for persistence
        const FORM_IDS = {
            openSavings: 'openSavingsForm',
            openFD: 'openFDForm',
            openLoan: 'openLoanForm',
            deposit: 'depositForm',
            withdraw: 'withdrawForm'
        };

        document.addEventListener('DOMContentLoaded', function() {
            // Open Savings Account Form
            const savingsForm = document.querySelector('form[action*="OpenSavingsAccount"]');
            if (savingsForm) {
                savingsForm.id = FORM_IDS.openSavings;
                restoreFormData(FORM_IDS.openSavings);
                
                savingsForm.addEventListener('submit', function() {
                    saveFormData(FORM_IDS.openSavings);
                });
                
                // Auto-uppercase Customer ID
                const custIdInput = savingsForm.querySelector('input[name="customerId"]');
                if (custIdInput) {
                    custIdInput.addEventListener('input', function(e) {
                        this.value = this.value.toUpperCase();
                    });
                }
            }

            // Open FD Form
            const fdForm = document.querySelector('form[action*="OpenFixedDepositAccount"]');
            if (fdForm) {
                fdForm.id = FORM_IDS.openFD;
                restoreFormData(FORM_IDS.openFD);
                
                fdForm.addEventListener('submit', function() {
                    saveFormData(FORM_IDS.openFD);
                });
                
                const custIdInput = fdForm.querySelector('input[name="customerId"]');
                if (custIdInput) {
                    custIdInput.addEventListener('input', function(e) {
                        this.value = this.value.toUpperCase();
                    });
                }
            }

            // Open Loan Form
            const loanForm = document.querySelector('form[action*="OpenLoanAccount"]');
            if (loanForm) {
                loanForm.id = FORM_IDS.openLoan;
                restoreFormData(FORM_IDS.openLoan);
                
                loanForm.addEventListener('submit', function() {
                    saveFormData(FORM_IDS.openLoan);
                });
                
                const custIdInput = loanForm.querySelector('input[name="customerId"]');
                if (custIdInput) {
                    custIdInput.addEventListener('input', function(e) {
                        this.value = this.value.toUpperCase();
                    });
                }
            }

            // Deposit Form
            const depositForm = document.querySelector('form[action*="Deposit"]');
            if (depositForm) {
                depositForm.id = FORM_IDS.deposit;
                restoreFormData(FORM_IDS.deposit);
                
                depositForm.addEventListener('submit', function() {
                    saveFormData(FORM_IDS.deposit);
                });
                
                const accountIdInput = depositForm.querySelector('input[name="accountId"]');
                if (accountIdInput) {
                    accountIdInput.addEventListener('input', function(e) {
                        this.value = this.value.toUpperCase();
                    });
                }
            }

            // Withdraw Form
            const withdrawForm = document.querySelector('form[action*="Withdraw"]');
            if (withdrawForm) {
                withdrawForm.id = FORM_IDS.withdraw;
                restoreFormData(FORM_IDS.withdraw);
                
                withdrawForm.addEventListener('submit', function() {
                    saveFormData(FORM_IDS.withdraw);
                });
                
                const accountIdInput = withdrawForm.querySelector('input[name="accountId"]');
                if (accountIdInput) {
                    accountIdInput.addEventListener('input', function(e) {
                        this.value = this.value.toUpperCase();
                    });
                }
            }

            // Clear form data on success
            const successMessage = '@(TempData["SuccessMessage"] ?? "")';
            if (successMessage) {
                Object.values(FORM_IDS).forEach(formId => {
                    clearFormData(formId);
                    
                    // Also reset the actual form element
                    const form = document.getElementById(formId);
                    if (form) {
                        form.reset();
                    }
                });
            }

            // Setup Loan Eligibility Calculator
            setupLoanEligibilityCalculator();
        });

        // Loan Eligibility Calculator
        function setupLoanEligibilityCalculator() {
            const salaryInput = document.getElementById('monthlySalary');
            const loanAmountInput = document.getElementById('loanAmount');
            const tenureInput = document.getElementById('tenureMonths');
            const emiInput = document.getElementById('estimatedEmi');
            const submitBtn = document.getElementById('loanSubmitBtn');

            if (!salaryInput || !loanAmountInput) return;

            let eligibility = null;

            salaryInput.addEventListener('input', function() {
                const salary = parseFloat(this.value);
                
                if (salary >= 1000) {
                    eligibility = calculateLoanEligibility(salary);
                    displayLoanEligibility(eligibility);
                    validateLoanAmount();
                } else {
                    document.getElementById('loanEligibilityCard').style.display = 'none';
                    document.getElementById('loanValidationMessage').style.display = 'none';
                    submitBtn.disabled = true;
                }
            });

            loanAmountInput.addEventListener('input', validateLoanAmount);
            
            // Recalculate and validate when tenure changes
            tenureInput.addEventListener('input', function() {
                calculateEMI();
                validateLoanAmount(); // Re-validate after EMI recalculation
            });

            function calculateLoanEligibility(salary) {
                const minLoan = salary * 30;
                const maxLoan = salary * 60;
                const maxEmi = salary * 0.6;
                
                let interestRate = 10;
                if (maxLoan >= 1000000) {
                    interestRate = 9;
                } else if (maxLoan >= 500000) {
                    interestRate = 9.5;
                }

                return {
                    minLoan: minLoan,
                    maxLoan: maxLoan,
                    maxEmi: maxEmi,
                    interestRate: interestRate,
                    salary: salary
                };
            }

            function displayLoanEligibility(elig) {
                const card = document.getElementById('loanEligibilityCard');
                const rangeSpan = document.getElementById('loanRange');
                const rateSpan = document.getElementById('interestRate');
                const emiSpan = document.getElementById('maxEmi');

                rangeSpan.textContent = `₹${formatCurrency(elig.minLoan)} to ₹${formatCurrency(elig.maxLoan)}`;
                rateSpan.textContent = `${elig.interestRate}% per annum`;
                emiSpan.textContent = `₹${formatCurrency(elig.maxEmi)}/month`;

                card.style.display = 'block';
            }

            function validateLoanAmount() {
                const loanAmount = parseFloat(loanAmountInput.value);
                const msgDiv = document.getElementById('loanValidationMessage');

                if (!eligibility || !loanAmount) {
                    msgDiv.style.display = 'none';
                    submitBtn.disabled = true;
                    return;
                }

                if (loanAmount < eligibility.minLoan) {
                    msgDiv.className = 'alert alert-warning';
                    msgDiv.innerHTML = `<i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Low Amount:</strong> Minimum recommended: ₹${formatCurrency(eligibility.minLoan)}`;
                    msgDiv.style.display = 'block';
                    submitBtn.disabled = false;
                } else if (loanAmount > eligibility.maxLoan) {
                    msgDiv.className = 'alert alert-danger';
                    msgDiv.innerHTML = `<i class="bi bi-x-circle me-2"></i>
                        <strong>Exceeds Eligibility:</strong> Maximum: ₹${formatCurrency(eligibility.maxLoan)}`;
                    msgDiv.style.display = 'block';
                    submitBtn.disabled = true;
                } else {
                    msgDiv.className = 'alert alert-success';
                    msgDiv.innerHTML = `<i class="bi bi-check-circle me-2"></i>
                        <strong>Eligible!</strong> Loan ₹${formatCurrency(loanAmount)} is within range.`;
                    msgDiv.style.display = 'block';
                    submitBtn.disabled = false;
                    calculateEMI();
                }
            }

            function calculateEMI() {
                const loanAmount = parseFloat(loanAmountInput.value);
                const tenure = parseInt(tenureInput.value);

                if (!eligibility || !loanAmount || !tenure) {
                    emiInput.value = '';
                    return;
                }

                const monthlyRate = (eligibility.interestRate / 12) / 100;
                const emi = (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, tenure)) / 
                            (Math.pow(1 + monthlyRate, tenure) - 1);

                emiInput.value = formatCurrency(emi);

                if (emi > eligibility.maxEmi) {
                    const msgDiv = document.getElementById('loanValidationMessage');
                    msgDiv.className = 'alert alert-danger';
                    msgDiv.innerHTML = `<i class="bi bi-x-circle me-2"></i>
                        <strong>EMI Too High:</strong> ₹${formatCurrency(emi)} exceeds max ₹${formatCurrency(eligibility.maxEmi)}`;
                    submitBtn.disabled = true;
                }
            }

            function formatCurrency(amount) {
                return new Intl.NumberFormat('en-IN', {
                    maximumFractionDigits: 0
                }).format(amount);
            }
        }
    </script>
}
